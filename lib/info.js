// Generated by CoffeeScript 1.6.3
(function() {
  var ArtistInfo, Info, Search, async, rest, util;

  rest = require('restler');

  async = require('async');

  util = require('./prop');

  Search = require('./search');

  Info = (function() {
    function Info(apiKey, baseUrl) {
      this.apiKey = apiKey;
      this.baseUrl = baseUrl != null ? baseUrl : "http://api.openaura.com/v1";
    }

    Info.prototype.byOaArtistId = function(id, err, cb) {
      var uri;
      uri = "" + this.baseUrl + "/info/artists/" + id + "?api_key=" + this.apiKey + "&id_type=oa:artist_id";
      console.log("req to: " + uri);
      return this._get(uri, err, cb);
    };

    Info.prototype.byOaAnchorId = function(id, err, cb) {
      var uri;
      uri = "" + this.baseUrl + "/info/artists/" + id + "?api_key=" + this.apiKey + "&id_type=oa:anchor_id";
      console.log("req to: " + uri);
      return this._get(uri, err, cb);
    };

    Info.prototype.byMusicbrainzGid = function(id, err, cb) {
      var uri;
      uri = "" + this.baseUrl + "/info/artists/" + id + "?api_key=" + this.apiKey + "&id_type=musicbrainz:gid";
      console.log("req to: " + uri);
      return this._get(uri, err, cb);
    };

    Info.prototype.iFeelLucky = function(str, err, cb) {
      var s,
        _this = this;
      s = new Search(this.apiKey, this.baseUrl, 1);
      return s.artist(str, err, function(results) {
        if (results.length > 0) {
          return _this.byOaArtistId(util.prop(results, "0.oa_artist_id"), err, cb);
        }
      });
    };

    Info.prototype._get = function(uri, err, cb) {
      var call;
      call = rest.get(uri);
      call.on('success', function(data, res) {
        console.log('success');
        return cb(new ArtistInfo(data));
      });
      call.on('fail', function(data, res) {
        console.log('fail', res.statusCode);
        return err(data);
      });
      return call.on('complete', function(data, res) {
        return console.log('complete');
      });
    };

    return Info;

  })();

  ArtistInfo = (function() {
    function ArtistInfo(obj) {
      var clone, cp, prop, _fn, _i, _len, _ref;
      prop = util.prop;
      clone = util.clone;
      this.oaArtistId = prop(obj, "oa_artist_d");
      this.oaAnchorId = prop(obj, "oa_anchor_id");
      this.musicbrainzGid = prop(obj, "musicbrainz_gid");
      this.name = prop(obj, "name");
      this.officialAura = prop(obj, "official");
      this.factCard = clone(prop(obj, "fact_card.media.0.data"));
      this.styleTags = clone(prop(obj, "style_tags.media.0.data.tags"));
      this.bio = prop(obj, "bio.media.0.data.text");
      this.coverPhoto = (function() {
        var _i, _len, _ref, _results;
        _ref = prop(obj, "cover_photo");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cp = _ref[_i];
          _results.push((function() {
            var o;
            return o = {
              source: clone(prop(cp, "source")),
              date: prop(cp, "date"),
              media: clone(prop(cp, "media")),
              popularity: prop(cp, "popularity")
            };
          })());
        }
        return _results;
      })();
      this.profilePhoto = {
        source: clone(prop(obj, "profile_photo.source")),
        date: prop(obj, "profile_photo.date"),
        media: clone(prop(obj, "profile_photo.media")),
        popularity: prop(obj, "profile_photo.popularity")
      };
      _ref = prop(obj, "cover_photo");
      _fn = function() {
        var o;
        return o = {
          source: clone(prop(cp, "source")),
          date: prop(cp, "date"),
          media: clone(prop(cp, "media")),
          popularity: prop(cp, "popularity")
        };
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cp = _ref[_i];
        _fn();
      }
    }

    return ArtistInfo;

  })();

  module.exports = Info;

}).call(this);
